@page "/covidplanlist"

@using SVSignalR.Shared.Models
@using SVSignalR.Shared.AppData

@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject WorkerAddressState workerAddressState

<h3>Covid Plan Detail</h3>
<Spin Spinning="_loading">
    <p>
        <a href="/addcovidplan">Create A New Record</a>
    </p>
    @if (cvPlans == null || cvPlans.Count() == 0)
    {
        <Empty Simple />
    }
    else
    {
        <Table TItem="CovidPlanModel" DataSource="@cvPlans"
               ScrollY="400px" PageSize="50" ScrollX="1550"
               Size="@TableSize.Small"
               Bordered="true">
            <Column Title="WorkerId" Width="100" @bind-Field="@context.WorkerId" Sortable="true" />
            <Column Title="FullName" Width="200" @bind-Field="@context.FullName" />
            <Column Title="Section" Width="200" @bind-Field="@context.SectionName" Sortable="true"/>
            <Column Title="Line" Width="200" @bind-Field="@context.LineName" Sortable="true"/>
            <Column Title="PhoneNumber" Width="150" @bind-Field="@context.PhoneNumber" />
            <Column Title="Detail" Width="200" @bind-Field="@context.AddressDetail" />
            <Column Title="Address" Width="400" @bind-Field="@context.AddressDisplay" />
            <Column Title="Status" Width="100" @bind-Field="@context.HealthStatus" />
            <Column Title="Time" Width="100" @bind-Field="@context.CreatedTime" Format="yyyy/MM/dd" />
        </Table>
    }
    @*<p>@msg</p>*@
</Spin>
@code {
    private bool _loading = true;
    CovidPlanModel[] cvPlans;

    AddressModel[] addresses;
    WorkerModel[] workers;
    
    string msg;

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
            .Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await LoadData();
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }
    protected async Task LoadData()
    {
        _loading = true;
        
        cvPlans = await Http.GetFromJsonAsync<CovidPlanModel[]>("api/covidplans");
        addresses = await Http.GetFromJsonAsync<AddressModel[]>("api/addresses");
        workers = await Http.GetFromJsonAsync<WorkerModel[]>("api/workers");

        workerAddressState.Addresses = addresses;
        workerAddressState.Workers = workers;

        msg = $"Success:{JsonSerializer.Serialize(cvPlans)}";

        _loading = false;

        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
